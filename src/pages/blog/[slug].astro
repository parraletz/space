---
import { type CollectionEntry, getCollection } from 'astro:content'
import BaseLayout from '../../layouts/BaseLayout.astro'
import Button from '../../components/Button.astro'
import FormattedDate from '../../components/FormattedDate.astro'
import PostPreview from '../../components/PostPreview.astro'
import Subscribe from '../../components/Subscribe.astro'
import { sortItemsByDateDesc } from '../../utils/data-utils'
import { slugify } from '../../utils/common-utils'
import PostComments from '../../components/PostComments.astro'

export async function getStaticPaths() {
  const allPosts = await getCollection('blog')

  // Para redirección: obtener los posts en español para redirigir
  const spanishPosts = allPosts.filter(post => post.data.language === 'es')

  // Posts en inglés para mostrar
  const englishPosts = allPosts
    .filter(post => !post.data.language || post.data.language === 'en')
    .sort(sortItemsByDateDesc)

  const postCount = englishPosts.length

  // Crear rutas para posts en inglés
  const englishRoutes = englishPosts.map((post, index) => ({
    params: { slug: post.slug },
    props: {
      post,
      prevPost: index + 1 !== postCount ? englishPosts[index + 1] : null,
      nextPost: index !== 0 ? englishPosts[index - 1] : null,
      shouldRedirect: false
    }
  }))

  // Crear rutas para redirecciones de posts en español
  const redirectRoutes = spanishPosts.map(post => ({
    params: { slug: post.slug },
    props: {
      post,
      shouldRedirect: true,
      redirectUrl: `/es/blog/${post.slug}/`,
      postTitle: post.data.title
    }
  }))

  return [...englishRoutes, ...redirectRoutes]
}

type Props = {
  post: CollectionEntry<'blog'>
  prevPost?: CollectionEntry<'blog'>
  nextPost?: CollectionEntry<'blog'>
  shouldRedirect?: boolean
  redirectUrl?: string
  postTitle?: string
}

const { href } = Astro.url
const { post, prevPost, nextPost, shouldRedirect, redirectUrl, postTitle } =
  Astro.props

// Si necesitamos redireccionar, preparar una redirección con JavaScript para evitar página en blanco
if (shouldRedirect && redirectUrl) {
  const htmlContent = `
    <!DOCTYPE html>
    <html lang="es">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="refresh" content="0;url=${redirectUrl}">
        <title>Redirecting</title>
        <style>
          body {
            margin: 0;
            padding: 0;
            opacity: 0;
            visibility: hidden;
            overflow: hidden;
            width: 0;
            height: 0;
          }
        </style>
        <script>
          // Redirección inmediata sin mostrar nada
          window.location.replace("${redirectUrl}");
        </script>
      </head>
      <body></body>
    </html>
  `

  return new Response(htmlContent, {
    status: 200,
    headers: {
      'Content-Type': 'text/html'
    }
  })
}

const {
  title,
  publishDate,
  updatedDate,
  excerpt,
  isFeatured,
  tags = [],
  seo
} = post.data
const { Content } = await post.render()
---

<BaseLayout
  title={seo?.title ?? title}
  description={seo?.description ?? excerpt}
  image={seo?.image}
  pageType='article'
  showHeader={false}
>
  <article class='mb-16 sm:mb-24'>
    <header class='mb-8'>
      <h1
        class='text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight'
      >
        {title}
      </h1>
      <div class='mt-4 text-sm'>
        <FormattedDate date={publishDate} />
        {
          updatedDate && (
            <>
              {' '}
              <span>
                (Updated on <FormattedDate date={updatedDate} />)
              </span>
            </>
          )
        }
      </div>
    </header>
    <div class='max-w-none prose prose-dante sm:prose-lg'>
      <Content />
    </div>
    <div
      class='mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base'
    >
      {
        tags.length > 0 && (
          <div class='flex flex-wrap gap-x-5 gap-y-1 text-sm'>
            {tags.map(tag => (
              <a
                class='text-main hover:underline'
                href={`/tags/${slugify(tag)}`}
              >
                #{tag}
              </a>
            ))}
          </div>
        )
      }
      <Button
        class='copy-url-button'
        aria-label='Copy link'
        data-url={href}
        data-tooltip-default='Copy link'
        data-tooltip-success='Copied'>Share</Button
      >
    </div>
  </article>

  {isFeatured && <PostComments />}

  {
    (prevPost || nextPost) && (
      <div class='my-16 sm:my-24'>
        <h2 class='mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl'>
          Read Next
        </h2>
        {nextPost && (
          <PostPreview
            post={nextPost}
            class='mb-10 sm:mb-12'
            headingLevel='h3'
          />
        )}
        {prevPost && (
          <PostPreview
            post={prevPost}
            class='mb-10 sm:mb-12'
            headingLevel='h3'
          />
        )}
      </div>
    )
  }
  <Subscribe class='my-16 sm:my-24' />
</BaseLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const copyUrlButton = document.querySelector(
      '.copy-url-button'
    ) as HTMLButtonElement
    copyUrlButton?.addEventListener('click', async () => {
      await copyUrl(copyUrlButton)
    })

    async function copyUrl(button: HTMLButtonElement) {
      let url = button.getAttribute('data-url') || ''
      let label = button.innerText

      await navigator.clipboard.writeText(url)

      button.innerText = 'Copied'

      setTimeout(() => {
        button.innerText = label
      }, 2500)
    }
  })
</script>